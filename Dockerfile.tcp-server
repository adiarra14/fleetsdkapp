# Simplified TCP server using pre-built JAR approach
FROM eclipse-temurin:17-jdk-alpine

# Cache-busting argument to force rebuild
ARG CACHE_BUST=default
RUN echo "Cache bust: $CACHE_BUST"
RUN echo "Force rebuild TCP server at $(date)"

WORKDIR /app

# Copy the pre-built JAR from lib directory (if available) or use SDK JAR directly
COPY tcp-server-service/lib/*.jar /app/lib/

# Download PostgreSQL JDBC driver if not present
RUN wget -O /app/lib/postgresql.jar https://jdbc.postgresql.org/download/postgresql-42.7.2.jar || echo "PostgreSQL driver download failed, using existing"

# Copy source files for compilation
COPY tcp-server-service/src/main/java/ /app/src/main/java/
COPY tcp-server-service/src/main/resources/ /app/src/main/resources/

# Compile the Java application with all dependencies
RUN mkdir -p /app/classes && \
    javac -cp "/app/lib/*" -d /app/classes \
    /app/src/main/java/com/maxvision/tcpserver/*.java \
    /app/src/main/java/com/maxvision/tcpserver/service/*.java \
    /app/src/main/java/com/maxvision/tcpserver/config/*.java

# Copy resources to classes directory
RUN cp -r /app/src/main/resources/* /app/classes/ 2>/dev/null || echo "No resources to copy"

# Create a manifest file for the JAR
RUN echo "Main-Class: com.maxvision.tcpserver.TcpServerApplication" > /app/manifest.txt && \
    echo "Class-Path: lib/maxvision-edge-protocol-gateway-service-sdk.jar lib/postgresql.jar" >> /app/manifest.txt

# Create the application JAR
RUN cd /app && jar cfm tcp-server-app.jar manifest.txt -C classes .

# Create startup script
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "==== BALISE TCP SERVER: Starting at $(date) ===="' >> /app/start.sh && \
    echo 'echo "==== Directory contents ===="' >> /app/start.sh && \
    echo 'ls -la /app' >> /app/start.sh && \
    echo 'echo "==== Lib directory contents ===="' >> /app/start.sh && \
    echo 'ls -la /app/lib' >> /app/start.sh && \
    echo 'echo "==== Starting Balise TCP Server with SDK Integration ===="' >> /app/start.sh && \
    echo 'java -cp "/app/lib/*:/app/tcp-server-app.jar" com.maxvision.tcpserver.TcpServerApplication &' >> /app/start.sh && \
    echo 'JAVA_PID=$!' >> /app/start.sh && \
    echo 'echo "Balise TCP Server started with PID: $JAVA_PID"' >> /app/start.sh && \
    echo 'sleep 5' >> /app/start.sh && \
    echo 'if kill -0 $JAVA_PID 2>/dev/null; then' >> /app/start.sh && \
    echo '    echo "Balise TCP Server is running successfully"' >> /app/start.sh && \
    echo 'else' >> /app/start.sh && \
    echo '    echo "ERROR: Balise TCP Server failed to start"' >> /app/start.sh && \
    echo '    echo "Checking for compilation errors..."' >> /app/start.sh && \
    echo '    find /app/classes -name "*.class" | head -10' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo 'echo "Keeping container alive for monitoring"' >> /app/start.sh && \
    echo 'while true; do' >> /app/start.sh && \
    echo '    echo "HEARTBEAT: Balise TCP Server alive at $(date)"' >> /app/start.sh && \
    echo '    if ! kill -0 $JAVA_PID 2>/dev/null; then' >> /app/start.sh && \
    echo '        echo "ERROR: Java process died, restarting..."' >> /app/start.sh && \
    echo '        java -cp "/app/lib/*:/app/tcp-server-app.jar" com.maxvision.tcpserver.TcpServerApplication &' >> /app/start.sh && \
    echo '        JAVA_PID=$!' >> /app/start.sh && \
    echo '    fi' >> /app/start.sh && \
    echo '    sleep 60' >> /app/start.sh && \
    echo 'done' >> /app/start.sh && \
    chmod +x /app/start.sh

# Set Spring profile for TCP server
ENV SPRING_PROFILES_ACTIVE=tcp-server
ENV SERVER_PORT=6060
ENV TCP_SERVER_PORT=6060
ENV JAVA_OPTS="-Xmx256m -Xms128m"

# Expose port
EXPOSE 6060

# Run the application
CMD ["/app/start.sh"]
