services:
  # Backend service using Java implementation with SDK
  balise-sdk-service:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - CACHE_BUST=2025-07-19-22-10-REAL-BALISE
    container_name: balise-sdk-service
    ports:
      - "6062:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://balise-postgres:5432/balisedb
      - SPRING_DATASOURCE_USERNAME=adminbdb
      - SPRING_DATASOURCE_PASSWORD=To7Z2UCeWTsriPxbADX8
      - SPRING_PROFILES_ACTIVE=backend
      - SERVER_PORT=8080
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      balise-postgres:
        condition: service_healthy

  # TCP server for balise connections
  balise-tcp-server:
    build:
      context: .
      dockerfile: Dockerfile.tcp-server
      args:
        - CACHE_BUST=2025-07-19-22-10-REAL-BALISE-TCP
    container_name: balise-tcp-server
    ports:
      - "6060:6060"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://balise-postgres:5432/balisedb
      - SPRING_DATASOURCE_USERNAME=adminbdb
      - SPRING_DATASOURCE_PASSWORD=To7Z2UCeWTsriPxbADX8
      - SPRING_PROFILES_ACTIVE=tcp-server
      - TCP_SERVER_PORT=6060
      - SERVER_PORT=6060
      - JAVA_OPTS=-Xmx256m -Xms128m
    depends_on:
      - balise-postgres
      - balise-sdk-service

  # Enhanced Fleet Monitor Web UI
  frontend:
    build:
      context: ./web-ui
      dockerfile: Dockerfile
    container_name: balise-web-ui
    ports:
      - "6061:80"
    depends_on:
      - balise-sdk-service

  # PostgreSQL database with PostGIS extension
  balise-postgres:
    image: postgis/postgis:14-3.3
    container_name: balise-postgres
    ports:
      - "6063:5432"
    environment:
      POSTGRES_DB: balisedb
      POSTGRES_USER: adminbdb
      POSTGRES_PASSWORD: To7Z2UCeWTsriPxbADX8
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adminbdb -d balisedb"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
