services:
  balise-sdk-service:
    build:
      context: ./backend-service
      dockerfile: Dockerfile.jar
    image: adiarra/balise-sdk-service:latest
    container_name: balise-sdk-service
    ports:
      - "6062:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://balise-postgres:5432/balisedb
      - SPRING_DATASOURCE_USERNAME=adminbdb
      - SPRING_DATASOURCE_PASSWORD=To7Z2UCeWTsriPxbADX8
      - SPRING_PROFILES_ACTIVE=backend
      - SERVER_PORT=8080
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - balise-postgres

  balise-tcp-server:
    build:
      context: .
      dockerfile: Dockerfile.final
      args:
        CACHEBUST: "$(date +%s)"
      no_cache: true
    image: maxvision-final-fix:local
    restart: always
    container_name: balise-tcp-server
    ports:
      - "8910:8910"
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - JAVA_OPTS=-Xmx512m -Xms256m -Dlogging.level.com.maxvision=TRACE -Dlogging.level.io.netty=DEBUG -Dlogging.level.root=INFO
      - DB_URL=jdbc:postgresql://balise-postgres:5432/balisedb
      - DB_USER=adminbdb
      - DB_PASSWORD=To7Z2UCeWTsriPxbADX8
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_MAXVISION=DEBUG
      - ENABLE_SERVICE_INJECTION=true
      - AUTO_STORE_BALISE_DATA=true
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 6060 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - balise-postgres

  balise-web-ui:
    build:
      context: ./web-ui
      dockerfile: Dockerfile
    image: adiarra/balise-web-ui:latest
    container_name: balise-web-ui
    ports:
      - "6061:80"
    depends_on:
      - balise-sdk-service

  cmacgm-integration:
    build:
      context: ./cma-cgm
      dockerfile: docker/Dockerfile.standalone
    image: adiarra/cmacgm-integration:latest
    container_name: cmacgm-integration
    ports:
      - "6064:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://balise-postgres:5432/balisedb
      - SPRING_DATASOURCE_USERNAME=adminbdb
      - SPRING_DATASOURCE_PASSWORD=To7Z2UCeWTsriPxbADX8
      - CMACGM_AUTH_URL=https://auth-pre.cma-cgm.com/as/token.oauth2
      - CMACGM_API_BASE_URL=https://apis-uat.cma-cgm.net/technical/generic/eagle/v1
      - CMACGM_CLIENT_ID=beapp-sinigroup
      - CMACGM_CLIENT_SECRET=YChnAz1dI2gvr40BMOyQWIeYT83DdtitHYfDmGd04xG5llcugV9NvfeihE72s1cJ
      - CMACGM_SCOPE=tracking:write:be
      - SERVER_PORT=8081
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8081 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      - balise-postgres
      - balise-sdk-service

  balise-postgres:
    image: postgis/postgis:14-3.3
    container_name: balise-postgres
    ports:
      - "6063:5432"
    environment:
      - POSTGRES_USER=adminbdb
      - POSTGRES_PASSWORD=To7Z2UCeWTsriPxbADX8
      - POSTGRES_DB=balisedb
      # Directly set Postgres to use md5 authentication
      - POSTGRES_HOST_AUTH_METHOD=md5
    command: |
      bash -c '
        # Start PostgreSQL in the background
        docker-entrypoint.sh postgres &
        PG_PID=$!
        
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL to be ready..."
        until pg_isready -U adminbdb -d balisedb; do
          sleep 2
        done
        echo "PostgreSQL is ready, proceeding with initialization"
        
        # Create tables using separate psql calls instead of heredoc
        echo "Creating tables..."
        
        # Create balises table
        psql -U adminbdb -d balisedb -c "CREATE TABLE IF NOT EXISTS balises (
            id SERIAL PRIMARY KEY,
            device_id VARCHAR(100) NOT NULL UNIQUE,
            name VARCHAR(100),
            status VARCHAR(50),
            battery_level INTEGER,
            signal_strength INTEGER,
            last_seen TIMESTAMP,
            latitude DECIMAL(10, 8),
            longitude DECIMAL(11, 8),
            container_id INTEGER,
            locked BOOLEAN,
            creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );"
        
        # Create balise_events table
        psql -U adminbdb -d balisedb -c "CREATE TABLE IF NOT EXISTS balise_events (
            id SERIAL PRIMARY KEY,
            balise_id INTEGER NOT NULL,
            event_type VARCHAR(50) NOT NULL,
            event_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            latitude DECIMAL(10, 8),
            longitude DECIMAL(11, 8),
            raw_data TEXT,
            parsed_data JSONB,
            CONSTRAINT fk_balise
                FOREIGN KEY(balise_id)
                REFERENCES balises(id)
        );"
        
        # Create containers table
        psql -U adminbdb -d balisedb -c "CREATE TABLE IF NOT EXISTS containers (
            id SERIAL PRIMARY KEY,
            container_number VARCHAR(50) UNIQUE,
            shipping_line VARCHAR(100),
            booking_reference VARCHAR(100),
            container_type VARCHAR(50),
            origin VARCHAR(100),
            destination VARCHAR(100),
            status VARCHAR(50),
            creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );"
        
        # Create assets table
        psql -U adminbdb -d balisedb -c "CREATE TABLE IF NOT EXISTS assets (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            type VARCHAR(50),
            status VARCHAR(50),
            customer VARCHAR(100),
            notes TEXT,
            creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );"
        
        # Create indexes
        psql -U adminbdb -d balisedb -c "CREATE INDEX IF NOT EXISTS idx_balise_device_id ON balises(device_id);"
        psql -U adminbdb -d balisedb -c "CREATE INDEX IF NOT EXISTS idx_balise_events_balise_id ON balise_events(balise_id);"
        psql -U adminbdb -d balisedb -c "CREATE INDEX IF NOT EXISTS idx_balise_events_event_time ON balise_events(event_time);"
        psql -U adminbdb -d balisedb -c "CREATE INDEX IF NOT EXISTS idx_balise_events_latitude ON balise_events(latitude);"
        psql -U adminbdb -d balisedb -c "CREATE INDEX IF NOT EXISTS idx_balise_events_longitude ON balise_events(longitude);"
        psql -U adminbdb -d balisedb -c "CREATE INDEX IF NOT EXISTS idx_containers_container_number ON containers(container_number);"
        
        # Set ownership
        psql -U adminbdb -d balisedb -c "ALTER TABLE balises OWNER TO adminbdb;"
        psql -U adminbdb -d balisedb -c "ALTER TABLE balise_events OWNER TO adminbdb;"
        psql -U adminbdb -d balisedb -c "ALTER TABLE containers OWNER TO adminbdb;"
        psql -U adminbdb -d balisedb -c "ALTER TABLE assets OWNER TO adminbdb;"
        
        # Grant permissions
        psql -U adminbdb -d balisedb -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO adminbdb;"
        psql -U adminbdb -d balisedb -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO adminbdb;"
        
        echo "Database initialization completed successfully!"
        
        # Keep the container running by waiting for the PostgreSQL process
        wait $PG_PID
      '
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adminbdb -d balisedb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
